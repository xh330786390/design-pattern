外观模式定义：
动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。装饰模式中，通过装饰者给被装饰者扩展了功能。

一.使用场景
1.需要扩展一个类的功能，或给一个类增加附加功能。
2.需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
3.需要为一批的兄弟类进行改装或加装功能，当然是首选装饰模式。
4.Java中的IO流的架构。
5.Android中的Context家族。

二.优点
1.装饰模式可以动态地扩展一个实现类的功能。
2.装饰模式是继承关系的一个替代方案。不管装饰多少层，最终返回的对象还是抽象类。
3.装饰类和被装饰类可以独立发展，而不会相互耦合。

三.缺点
多层的装饰是比较复杂的。
应该尽量减少装饰类的数量，以便降低系统的复杂度
